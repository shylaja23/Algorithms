/*
HeapSort Implementation
->find last parent in the tree (array_input.Length/2)-1 because if there are n number of leaf nodes in complete binary tree then its last parent is one of the last nodes in the non-leaf set.
->the left child and right child are (index_of_parent+1)*2-1 and (index_of_parent+1)*2
->if we check if any of the right child indexes are out of array_input.Length then we will know that child doesn't exist. 
->There has to be atleast one child to call it a parent and if left chil doesn't exist, right child also will not exist as this is a complete binary tree.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Program p = new Program();
            p.HeapSort(new int[]{3,4,7,1,5,8});
        }
        public void HeapSort(int[] inp)
        {
            int heapsize = inp.Length;
            while(heapsize >1){
            for(int i = (heapsize/2)-1;i >= 0;i--){
                Heapify(ref inp, heapsize,i);
            }
            swap(ref inp,heapsize-1,0);
            heapsize--;
            print(inp);
            }
        }
        public void print(int[] inp)
        {
            for(int i = 0; i <inp.Length;i++)
                Console.Write(inp[i]+ " ");
            Console.WriteLine("");
        }
        public void Heapify(ref int[] inp,int heapsize,int index)
        {
            
            int leftchild =  (index+1)*2-1;
            int rightchild = (index+1)*2;
            
            Console.WriteLine("Checking parent"+inp[index] +" pos"+index+"  left "+ leftchild+" right "+rightchild);    
            int swappingindex = index;
            if(leftchild > index && leftchild < heapsize && inp[leftchild] > inp[index])
                swappingindex = leftchild;
            if(rightchild > index && rightchild <heapsize && inp[rightchild] > inp[swappingindex])
                swappingindex = rightchild;
            if(swappingindex != index){
                swap(ref inp,swappingindex,index);
                //print(inp);
            }
        }
        public void swap(ref int[] inp,int tmp1,int tmp2)
        {
            //Console.WriteLine("Swapping inp["+tmp1+"]:"+inp[tmp1]+" inp["+ tmp2+"]:"+inp[tmp2]);
            int temp = inp[tmp1];
            inp[tmp1] = inp[tmp2];
            inp[tmp2] = temp;
        }
        
    }
}
